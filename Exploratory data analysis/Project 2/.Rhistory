x <- 1; y <- 2
plot(x,y)
hist(x)
x <- 1:10; y <- 2:20
plot(x,y)
hist(x)
x <- rnorm(10); y <- rnorm(10)
plot(x,y)
hist(x)
library(jsonlite)
jsonData <-fromJSON("http://stats.grok.se/json/en/201505/25-Hydroxyvitamin%20D3%201-alpha-hydroxylase")
names(jsonData)
head(jsonData)
names(jsonData)
names(jsonData$daily_views)
names(jsonData$daily_views$2015-0503)
names(jsonData$daily_views$2015-05-03)
jsonData$daily_views$2015-05-03
jsonData$daily_views
jsonData$daily_views$"2015-05-03"
?jsonlight
?jsonlite
trial <- flatten(jsonData, recursive=TRUE)
str(jsonData)
?fromJSON
jsonData_flat<-fromJSON("http://stats.grok.se/json/en/201505/25-Hydroxyvitamin%20D3%201-alpha-hydroxylase",flatten=TRUE)
head(jsonData)
str(jsonData)
str(jsonData_flat)
str(jsonData)
jsonData[1]
jsonData[[1]
]
str(jsonData[1])
str(jsonData[[1]])
length(jsonData[1])
length(jsonData[[1]])
jsonData[[1]][1]
str(jsonData[[1]][1])
flatten(jsonData)
as.data.frame(jsonData)
jsonDatadf <- as.data.frame(jsoNData)
jsonDatadf <- as.data.frame(jsonData)
str(jsonDatadf)
head(jsonDatadf)
jsonDatadf
require(dplyr)
glimpse(jsonData)
glimpse(jsonDatadf)
dim(jsonDatadf)
jsonData2<-fromJSON("http://stats.grok.se/json/en/201505/25-Hydroxyvitamin D3 01-alpha-hydroxylase")
jsonData2
jsonData2<-fromJSON("http://stats.grok.se/json/en/201505/25-Hydroxyvitamin%20D3%2001-alpha-hydroxylase")
jsonData2
jsonData2<-fromJSON("http://stats.grok.se/json/en/201505/25-Hydroxyvitamin%20D3%201-alpha-hydroxylase")
jsonData2
jsonData2<-fromJSON("http://stats.grok.se/json/en/201505/25-Hydroxyvitamin D3 1-alpha-hydroxylase")
jsonData2
download.file("http://genewikiplus.org/data/genewiki-latest.txt", dest.file = "genewiki-latest.txt")
library(ggplot2)
library(datasets)
library(lattice)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
et.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c ("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1))
## Building the panel with addl lines
xyplot(y ~ x | f, panel = function(x,y,...){
panel.xyplot(x,y,...)
panel.abline(h = median (y), lty= 2)
panel.lmline(x,y,col = 2)
})
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color = drv)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"))
qplot(hwy data = mpg, fill = drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(displ, hwy, data = mpg, facets = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(hwy, data = mpg, facets = .~drv, binwidth = 2)
qplot(hwy, data = mpg, geom="density")
qplot(hwy, data = mpg, geom="density", color = drv)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"))
qplot(displ, hwy, data = mpg, geom=c("point","smooth"), method = "lm")
qplot(hwy, data = mpg, geom="density", color = drv)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"), method = "lm")
glimpse(mpg)
head(mpg)
qplot(displ, hwy, data = mpg, geom=c("point","smooth"), method = "lm", facet = .~manufacturer)
summary(mpg)
library(dplyr)
glimpse(mpg)
# Linear regression
qplot(displ, hwy, data = mpg, geom=c("point","smooth"), method = "lm", facets = .~class)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
g <- ggplot(mpg, aes(displ, hwy))
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method= "lm")
g + geom_point() + geom_smooth(method= "lm") + facet_grid( .~ manufacturer)
# Load packages
require("ggplot2")
require("dplyr")
# Setting the working directory
setwd("/Users/edwardlau/Documents/Courses and Webinar/Coursea/Exploratory data analysis/Project 2/")
# Read files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
boxplot(Emission ~ year, NEI)
boxplot(Emissions ~ year, NEI)
NEI$year
